
## Project: Blinter VS Code Debug & Lint Extension

### 1. High-Level Goal

Transform **Blinter** into a **VS Code debug extension** designed for **debugging and linting Batch (.bat/.cmd)** files, integrating seamlessly with the native **Run and Debug UI**.
The extension replaces its standalone “Run Blinter” button with full **native debugging integration** while preserving and enhancing **automatic linting, diagnostics, hovers, and quick fixes**.

The Blinter core engine is at: [https://github.com/tboy1337/Blinter](https://github.com/tboy1337/Blinter)

---

### 2. Core User Experience

#### a. Native Run & Debug Integration (Idea.md priority)

* The **Run and Debug** button on the VS Code sidebar launches Blinter automatically via a new debugger contribution (`type: "blinter-debug"`).
* Remove the standalone button and any custom Run command UI (`blinter.run`).
* Implement the inline **debug adapter** (using `lib/debugAdapterCore.js` + `DebugAdapterInlineImplementation`) that:

  * Spawns the Blinter process.
  * Captures and streams stdout/stderr to the **Debug Console**.
  * Parses the output for diagnostics and variable tracking.
* When a session starts:

  * Open a **side panel** titled “Blinter Output” within the Run and Debug view.
  * Parse and classify output into **Errors, Warnings, Undefined Variables**, and **Info**.
  * Display clickable links (e.g., `file.bat:123 — message`) that reveal the exact line in the editor.

---

#### b. Automatic and On-Demand Linting (from project.txt)

* The extension automatically lints active batch files in real-time.
* Configurable behaviors via `settings.json`:

  * `blinter.enabled`: toggle Blinter entirely.
  * `blinter.runOn`: `"onSave"` or `"onType"`.
  * `blinter.debounceDelay`: milliseconds for `onType` delay.
  * `blinter.rulesPath`: optional path to a custom rules.json.
* Real-time linting occurs independently of debugging mode, ensuring quick problem detection during normal editing.

---

#### c. Output Parsing, Variable Tracking, and Diagnostics

* Parse Blinter output to extract:

  * File paths, line numbers, severity, and message.
  * Variable definitions, modifications, and usage traces.
  * “Stupid lines” (anti-patterns like undefined variables, empty labels, unreachable code).
* Store parsed issues in an internal map (`issuesStore`).
* Convert these to:

  * **Diagnostics** (`vscode.DiagnosticCollection`) visible in the Problems panel.
  * **Decorations** (highlight or underline) applied directly in the editor.
  * **Hover tooltips** that summarize errors or show variable traces.
* Diagnostics must update incrementally during debugging and clear on session termination.

---

#### d. Hover & Clickable Problem Display

* Hovering a flagged line displays:

  * Classification (Error/Warning/Info)
  * The detailed message
  * Optional variable trace, e.g., “Defined at foo.bat:15 → Modified at bar.bat:45”
* Clicking items in the side panel or Problems list should:

  * Focus the corresponding editor.
  * Scroll smoothly to the line.
  * Optionally flash the affected line.

---

#### e. Side Panel (Webview Integration)

* Add a WebviewViewProvider registered under the **Run & Debug container**:

  * ID: `blinter.outputSummary`
  * Displays categories (Errors, Warnings, Info) with clickable line entries.
* Click → Reveal corresponding editor location via `vscode.window.showTextDocument()`.

---

### 3. Developer & System Features

#### a. Debug Adapter Implementation

* Implemented inline in `extension.js` by wrapping `lib/debugAdapterCore.js` with `vscode.DebugAdapterInlineImplementation`.
* Launches Blinter process with:

  ```ts
  spawn('blinter.exe', [args]);
  ```
* Forwards stdout/stderr to VS Code debug console and parser.

#### b. Linter Execution Logic (Merged)

* The extension must be **self-contained** — bundle the `blinter.exe` and default `rules.json`.
* Use child process execution (`child_process.spawn`).
* Handle missing binaries gracefully.
* Direct all raw outputs to a dedicated **Output Channel** (“Blinter”).

---

### 4. VS Code Contributions (`package.json` summary)

#### Debugging (idea.md)

```json
{
  "contributes": {
    "debuggers": [
      {
        "type": "blinter-debug",
        "label": "Blinter Debugger",
        "program": "./out/debugAdapter.js",
        "enableBreakpointsFor": { "languageIds": ["bat", "cmd"] },
        "initialConfigurations": [
          {
            "type": "blinter-debug",
            "request": "launch",
            "name": "Launch Batch (Blinter)",
            "program": "${file}"
          }
        ]
      }
    ],
    "views": {
      "debug": [
        {
          "id": "blinter.outputSummary",
          "name": "Blinter Output"
        }
      ]
    }
  }
}
```

#### Configuration (from project.txt)

```json
{
  "configuration": {
    "title": "Blinter",
    "properties": {
      "blinter.enabled": {
        "type": "boolean",
        "default": true
      },
      "blinter.runOn": {
        "type": "string",
        "enum": ["onSave", "onType"],
        "default": "onSave"
      },
      "blinter.debounceDelay": {
        "type": "number",
        "default": 500
      },
      "blinter.rulesPath": {
        "type": ["string", "null"],
        "default": null
      }
    }
  }
}
```

> **Remove** all `"contributes.commands"`, `"menus"`, and `"viewsContainers.activitybar"` entries from the previous version — the extension no longer has a standalone button or activity bar icon.

---

### 5. Code Actions (Quick Fixes)

* Implement `CodeActionProvider` to offer simple automated corrections for certain patterns.
* Examples:

  * Fix inconsistent casing (`eChO` → `echo`).
  * Add missing variable initialization.
  * Remove redundant labels.

---

### 6. Testing & Logging

* Create a **`progress.txt`** file updated after every significant implementation step.

  * Include what was done, remaining steps, and pending tasks.
  * Must be written in a self-contained format so another AI or agent can continue seamlessly.
* Create a **batch script** that runs:

  ```bat
  npm run lint > project_logs.log 2>&1
  npm test >> project_logs.log 2>&1
  ```

  Execute using:

  ```js
  spawn('cmd', ['/c', 'run_tests.bat']);
  ```

  * If execution is not possible in the environment, prompt the user to run manually and confirm when ready.
  * Parse `project_logs.log` for relevant results, summarize, then clear the log.

---

### 7. User Experience Flow Summary

1. User opens a `.bat` or `.cmd` file.
2. VS Code activates Blinter.
3. Clicking **Run and Debug** launches `blinter-debug`.
4. Output is captured and visualized:

   * Debug Console stream
   * Diagnostics (Problems)
   * Highlighted code
   * Hover tips
   * Side panel classification
5. Linting continues automatically (onSave/onType) during edits.
6. Quick Fixes available inline for simple issues.

---

### 8. Deliverables Checklist

* [x] Update `package.json` (debugger contribution, activation events, settings).
* [x] Add a reusable debug adapter core (`lib/debugAdapterCore.js`) that can be unit-tested.
* [x] Refactor `extension.js` to register the debug configuration, diagnostics pipeline, hover provider, decorations, and webview view provider.
* [x] Implement progress tracking (`progress`).
* [x] Implement quick fixes for command casing.
* [ ] Provide `run_tests.bat` or equivalent logging helper (see §6) if automation is required.
* [x] Document Run & Debug workflow + sample `launch.json` snippet in `README.md` / `PACKAGING.md`.
* [x] Maintain unit/integration tests covering parser, discovery, analyzer, and debug adapter streaming behavior.


MOST IMPORTANT.
remember about the progress.txt. read it first before touching any file and make sure its upadted as specified respecting its format.